#include "termostat.h"

#include <QDebug>

Termostat::Termostat(Arduino *a, QObject *parent, short t) : QObject(parent)
{
    arduino = a;                                                                        // Инициализируем указатель адресом обработчика команд исполнительных механизмов (Класс Arduino)
    qDebug() << "Create termostat thread. Temperature set =" << t;
    bool c;
    if (t == 0)
        c = false;
    else
    {
        c = true;
    }
    preset = t;                                                                         // Устанавливаем параметры нагрева и вентиляции, в соответствие
    termal = t;                                                                         // со значениями, переданными при инициализации объекта
    cooler = c;                                                                         // Если была передана нулевая температура (по умолчанию), вентилятор
    setTermoMode(c, t);                                                                 // циркуляции воздуха будет отключен
}

Termostat::~Termostat()
{
    cooler = false;                                                                     // При ликвидации термостата обеспечить отключение вентилятора
    termal = 0;                                                                         // и нагревателей
    preset = 0;
    setTermoMode(cooler, termal);
    qDebug() << "Destroy termostat thread.";
}
void Termostat::setTermoMode(bool c, short t)                                           // Устанавливает предельную температуру нагревательного элемента и управляет вентилятором
{
    if (c == true)
        arduino->coolerOn();
    else
        arduino->coolerOff();
    arduino->heating(t);                                                                // Вызывает установку температуры обработчиком команд в другом потоке
}
void Termostat::update()                                                                // Обновляет текущий режим работы. Функция должна вызываться регулярно по таймеру для
{                                                                                       // осуществления замера текущих температур и коррекции работы нагревателя и вентилятора
    qDebug() << "New termal mode set!";
    setTermoMode(cooler, termal);
    QStringList tl = arduino->getTemperature();                                         // Получить список температур о обработчика команд исполнительных механизмов
    if (tl.size() < 2)
        return;                                                                         // В случае некорректного ответа от Контроллера, не обрабатывать данный цикл обновления режимов
    short tt = tl.at(EXTRUDER).toShort();
    short th = tl.at(TABLE).toShort();

    qDebug() << "Tablet: " << tt << " / Heater: " << th << " / Target: " << preset;     // Измеренные и заданная температуры
    if ((tt > termal) && (preheating == true))
        emit heatUp(tt);                                                                // Послать сигнал об увеличении температуры (необходимо для отображения состояния преднагрева образцов)
    if ((tt < preset ) && (th < preset)) {                                              // Если температуры нагревательного элемента и образцов ниже заданного уровня,
        cooler = false;                                                                 // Отключить принудительную циркуляцию воздуха до момента разогрева нагревательного элемента
        termal = preset + 7;                                                            // Для ускорения достижения заданной температуры, нагреваем стол на +7гр.цельсия (ПОДОБРАТЬ !!!)
    }
    if ((tt < preset ) && (th >= preset)) {                                             // Если температура нагревателя достигла или превысила заданную, но образцы еще не догрелись
        cooler = true;                                                                  // включить принудительную циркуляцию воздуха
        termal = preset + 2;                                                            // и снизить температуру подогрева до целевой +2 градуса на тепловые потери
    }
    if (tt >= preset ) {                                                                // При достижении заданной температуры образцами или их перегреве, включить принудительную циркуляцию
        cooler = true;                                                                  // воздуха и отключить нагреватель (или включить холодильник - при наличии)
        termal = 0;
        if (preheating == true)                                                         // Если протекает режим преднагрева (не стабилизации), а температура образцов достигла целевой
        {
            preheating = false;                                                         // преднагрев закончен (сброс флага)
            emit heated();                                                              // уведомляем TaskExecutor о завершении ожидания требуемой температуры перед началом опыта
        }
    }
    if (preset == 0) {                                                                  // Если нагрев не требуется,
        cooler = false;                                                                 // отключаем принудительную циркуляцию
        termal = 0;                                                                     // и нагревательный элемент
    }
}
void Termostat::setTemperature(short t)                                                 // Слот в который получаем необходимую для эксперимента температуру.
{
    preset = t;
    preheating = true;                                                                  // Получив температуру, устанавливаем флаг преднагрева
}
