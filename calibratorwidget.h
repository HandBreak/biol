#ifndef CALIBRATORWIDGET_H
#define CALIBRATORWIDGET_H
/*
 * Класс реализующий функцию калибровки положения камеры в зависимости от типа
 * установленного планшета. Калибровка осуществляется посредством визуального
 * контроля позиционирования на верхней левой и нижней правой лунках. Предусмо
 * трена вознможность скорректировать положения камеры по осям X и Y, а так же
 * по высоте подъёма.  Предельный нижний уровень положения камеры зададается
 * типом планшета и передаётся через набор параметров Task. Положение камеры
 * определяется как среднее значение положений для верхней левой и нижней пра-
 * вой лунок.
 *
 * TODO: Привести к единому стилю элементы управления.
 *       Сделать колибровку по  * трем лункам для вычисления коэффициента "пе-
 *       рекоса" и последующей коррекции положения планшета.
 *       Сделать "мишень" для обеспечения более точного вписывания лунки в
 *       центр объектива камеры
 *       Устранить проблему эпизодического "зависания" ПО при нажатии элементов
 *       управления в области просмотра видеопотока.
 */
#include <QWidget>
#include <QPushButton>
#include <QEventLoop>
#include <QMutex>
#include <QList>
#include <QTimer>
#include <QStackedLayout>
#include <QStringList>
#include <QMessageBox>

#include <videowidget.h>
#include <task.h>

namespace Ui {
class CalibratorWidget;
}

class CalibratorWidget : public QWidget
{
    Q_OBJECT

public:
    explicit CalibratorWidget(VideoWidget &, QWidget *parent = 0);
    ~CalibratorWidget();

private:
    Ui::CalibratorWidget *ui;
    QWidget *widget;                                                                    // Собственно сам виджет с элементами управления идущий как слой наряду с видеослоем
    QEventLoop loop;                                                                    // Цикл ожидания (для ожидания завершения позиционирования исполнительных устройств)
    Task *currentTask = NULL;                                                           // Указатель на "Задание" для извлечения параметров выбранного планшета
    void waiting();                                                                     // Функция ожидания позиционировани исполнительных механизмов
    bool firstHole;                                                                     // Флаг. Указывает на то, что калибруется положение первой лунки. (расчет шага - после координат второй лунки)
    bool updatePos;                                                                     // Флаг. Указывает на то, что необходимо обновить координаты лунок в задании (виджет может использоваться для иных целей)
    int holeLastXPosition;                                                              // Для хранения промежуточного значения координат по оси X
    int holeLastYPosition;                                                              // Для хранения промежуточного значения координат по оси Y
    int holeLastZPosition;                                                              // Для хранения промежуточного значения координат по оси Z

signals:
    void goToPosition(int, int, int);                                                   // Запрос позиционирования головки в первую или последнюю лунку с координатами по умолчанию из задания
    void getCurrentPosition();                                                          // Запрос текущего положения головки, до позиционирования
    void getMoveStatus();                                                               // Запрос состояния перемещения (да/нет) исполнительных механизмов. Ретранслируется в цикле ожидания
    void lightOn();                                                                     // Запрос включения подстветки для контроля положения лунки
    void lightOff();                                                                    // Запрос выключения подстветки для цикла позиционирования
    void toMainReturn();                                                                // Запрос выхода из виджета калибровки в главное меню
    void shiftX(int);                                                                   // Запрос смещения головки на (x)mm в требуемом направлении
    void shiftY(int);                                                                   // Запрос смещения планшета на (x)mm в требуемом направлении
    void shiftZ(int);                                                                   // Запрос перемещения вверх или вниз на (x)mm видеокамеры
    void go();                                                                          // Сигнал указывающий на завершение калибровки и необходимость перехода к следующему этапу
    void pauseClicked();                                                                // Сигнал запроса приостановки/продолжения эксперемента в режиме видеоконтроля
    void resVisualChk();                                                                // Сигнал сброса флажка визуального контроля при нажатии "Выход" в режиме видеоконтроля.

public slots:
    void showVideoViewer();                                                             // Слот. Поступление сигнала переводит виджет в режим просмотра. (отключает элементы управления)
    void showCalibratorCtl();                                                           // Слот. Включает элементы управления для калибровки положения и т.п.
    void setHoleName(QString);                                                          // Слот. Обновляет индикацию имени текущей лунки (получает его значение от TaskExecutor)
    void setCurrentTemp(short);                                                         // Слот. Обновляет индикацию температуры исследуемой лунки (получает еее значение от TaskExecutor
    void calibrate(Task *task);                                                         // Слот. Получает указатель на "Задание" и запускает цикл юстировки.
    void axisPosition(int,int,int);                                                     // Слот. Получает установленные в процессе калибровки значения позиций по осям от Arduino
    void waitMoving(bool);                                                              // Не позволяет переходить к следующему этапу пока поступают сигналы о выполнении перемещения.

private slots:
    void onReturnClicked();                                                             // Обработка нажатия кнопки "Выход"
    void onRightClicked();                                                              // Обработка нажатия кнопки "Вправо"
    void onLeftClicked();                                                               // Обработка нажатия кнопки "Влево"
    void onUpClicked();                                                                 // Обработка нажатия кнопки "Вверх"
    void onDownClicked();                                                               // Обработка нажатия кнопки "Вниз"
    void onZoomInClicked();                                                             // Обработка нажатия кнопки "Приблизить"
    void onZoomOutClicked();                                                            // Обработка нажатия кнопки "Отдалить"
    void onActionClicked();                                                             // Обработка нажатия кнопки "Далее" / "Выход"
};

#endif // CALIBRATORWIDGET_H
